buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenLocal()
		maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.zhl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	compile('com.alibaba:druid:1.0.26')
	compile('com.github.pagehelper:pagehelper:5.0.0')
//	compile('org.springframework.boot:spring-boot-starter-logging')
	compile('com.github.pagehelper:pagehelper-spring-boot-autoconfigure:1.2.3')
	compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

//打包发布的配置
jar {
	String someString = ''
	configurations.runtime.each {someString = someString + " lib//"+it.name}
	manifest {
		attributes 'Main-Class': 'com.est.consumer.ConsumerApplication'
		attributes 'Class-Path': someString
	}
}
//清除上次的编译过的文件
task clearPj(type:Delete){
	delete 'build','target'
}
task copyJar(type:Copy){
	from configurations.runtime
	into ('build/libs/lib')
}
//把JAR复制到目标目录
task release(type: Copy,dependsOn: [build,copyJar]) {
// from 'conf'
// into ('build/libs/eachend/conf') // 目标位置
}